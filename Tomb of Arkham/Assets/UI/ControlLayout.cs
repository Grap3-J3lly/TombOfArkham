//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/UI/ControlLayout.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlLayout : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlLayout()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlLayout"",
    ""maps"": [
        {
            ""name"": ""Basics"",
            ""id"": ""03afed85-c168-493d-8ee3-e232f6283328"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""be05ecce-f526-47cc-b1d4-15c2f55941c6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b888ebf4-1a70-490b-856d-4f8101d2fb63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""5a6e0d7e-cee3-4349-8b3f-5a09164f334d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c97fb82-1c15-4fd4-8860-b2d64120d43b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PrimaryControlLayout"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard Keys"",
                    ""id"": ""168a2126-1111-475b-8118-cbece8f4ebb1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b734a0e5-8ea9-43fd-9a94-9220995fc37e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PrimaryControlLayout"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c1bc8331-94d9-4cdd-b4b7-b1a741dc79fd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PrimaryControlLayout"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f354d1f4-df33-4720-a9cc-a93f3b3eb393"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PrimaryControlLayout"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f79a017c-e033-4c58-ae9c-816dc21fed6c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PrimaryControlLayout"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9ec2d86d-3217-431e-bc1b-929af549e23b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PrimaryControlLayout"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d07a41de-d4d4-44e0-84c4-ec81092d36dc"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PrimaryControlLayout"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus"",
            ""id"": ""46ad811f-bc09-4315-980f-95a4ecf72c87"",
            ""actions"": [
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""76fe8898-2eb0-4d49-bc8b-11c6c567f2cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""03972c93-660c-4119-9896-d129bd47d9e8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""891c2234-03d8-4ad8-b2d2-da6efa10168f"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PrimaryControlLayout"",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86d34298-b866-478a-9839-43c4cb36b99a"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PrimaryControlLayout"",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PrimaryControlLayout"",
            ""bindingGroup"": ""PrimaryControlLayout"",
            ""devices"": [
                {
                    ""devicePath"": ""<AndroidGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<AndroidJoystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Basics
        m_Basics = asset.FindActionMap("Basics", throwIfNotFound: true);
        m_Basics_Move = m_Basics.FindAction("Move", throwIfNotFound: true);
        m_Basics_Jump = m_Basics.FindAction("Jump", throwIfNotFound: true);
        m_Basics_Attack = m_Basics.FindAction("Attack", throwIfNotFound: true);
        // Menus
        m_Menus = asset.FindActionMap("Menus", throwIfNotFound: true);
        m_Menus_TouchPress = m_Menus.FindAction("TouchPress", throwIfNotFound: true);
        m_Menus_TouchPosition = m_Menus.FindAction("TouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Basics
    private readonly InputActionMap m_Basics;
    private IBasicsActions m_BasicsActionsCallbackInterface;
    private readonly InputAction m_Basics_Move;
    private readonly InputAction m_Basics_Jump;
    private readonly InputAction m_Basics_Attack;
    public struct BasicsActions
    {
        private @ControlLayout m_Wrapper;
        public BasicsActions(@ControlLayout wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Basics_Move;
        public InputAction @Jump => m_Wrapper.m_Basics_Jump;
        public InputAction @Attack => m_Wrapper.m_Basics_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Basics; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicsActions set) { return set.Get(); }
        public void SetCallbacks(IBasicsActions instance)
        {
            if (m_Wrapper.m_BasicsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BasicsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BasicsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BasicsActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_BasicsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BasicsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BasicsActionsCallbackInterface.OnJump;
                @Attack.started -= m_Wrapper.m_BasicsActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_BasicsActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_BasicsActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_BasicsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public BasicsActions @Basics => new BasicsActions(this);

    // Menus
    private readonly InputActionMap m_Menus;
    private IMenusActions m_MenusActionsCallbackInterface;
    private readonly InputAction m_Menus_TouchPress;
    private readonly InputAction m_Menus_TouchPosition;
    public struct MenusActions
    {
        private @ControlLayout m_Wrapper;
        public MenusActions(@ControlLayout wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPress => m_Wrapper.m_Menus_TouchPress;
        public InputAction @TouchPosition => m_Wrapper.m_Menus_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_Menus; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenusActions set) { return set.Get(); }
        public void SetCallbacks(IMenusActions instance)
        {
            if (m_Wrapper.m_MenusActionsCallbackInterface != null)
            {
                @TouchPress.started -= m_Wrapper.m_MenusActionsCallbackInterface.OnTouchPress;
                @TouchPress.performed -= m_Wrapper.m_MenusActionsCallbackInterface.OnTouchPress;
                @TouchPress.canceled -= m_Wrapper.m_MenusActionsCallbackInterface.OnTouchPress;
                @TouchPosition.started -= m_Wrapper.m_MenusActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_MenusActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_MenusActionsCallbackInterface.OnTouchPosition;
            }
            m_Wrapper.m_MenusActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchPress.started += instance.OnTouchPress;
                @TouchPress.performed += instance.OnTouchPress;
                @TouchPress.canceled += instance.OnTouchPress;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
            }
        }
    }
    public MenusActions @Menus => new MenusActions(this);
    private int m_PrimaryControlLayoutSchemeIndex = -1;
    public InputControlScheme PrimaryControlLayoutScheme
    {
        get
        {
            if (m_PrimaryControlLayoutSchemeIndex == -1) m_PrimaryControlLayoutSchemeIndex = asset.FindControlSchemeIndex("PrimaryControlLayout");
            return asset.controlSchemes[m_PrimaryControlLayoutSchemeIndex];
        }
    }
    public interface IBasicsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IMenusActions
    {
        void OnTouchPress(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
}
